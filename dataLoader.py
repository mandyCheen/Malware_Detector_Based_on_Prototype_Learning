from malwareDetector import malwareDetector
import pandas as pd
import numpy as np
import os

class DatasetLoad:
    _instance = None

    def __new__(cls, detector: malwareDetector = malwareDetector()):
        if cls._instance is None:
            cls._instance = super(DatasetLoad, cls).__new__(cls)
            cls._instance.initialize(detector)
        return cls._instance

    def initialize(self, detector: malwareDetector):
        self.rawDataset = pd.read_csv(detector.rawDataset)
        self.byte_sequence_length = detector.byte_sequence_length
        self.seed = detector.seed
        self.cpuArch = detector.cpuArch
        self.datasetSplitFolder = detector.datasetSplitFolder
        self.val = detector.val
        self.trainData, self.testData, self.valData = self.load_all_datasets()

    def write_split_dataset(self, mode, familyList) -> None:
        with open(f"{self.datasetSplitFolder}/{mode}_{self.cpuArch}_{self.byte_sequence_length}.txt", "w") as f:
            for family in familyList:
                f.write(f"{family}\n")

    def get_split_dataset(self) -> None: 
        if self.val:
            trainRate, testRate, valRate = 0.6, 0.3, 0.1
        else:
            trainRate, testRate, valRate = 0.7, 0.3, 0.0
        
        familyList = self.rawDataset["family"].unique()
        np.random.seed(self.seed)
        np.random.shuffle(familyList)
        
        trainFamily = familyList[:int(len(familyList) * trainRate)]
        testFamily = familyList[int(len(familyList) * trainRate):int(len(familyList) * (trainRate + testRate))]
        valFamily = familyList[int(len(familyList) * (trainRate + testRate)):]
        
        self.write_split_dataset("train", trainFamily)
        self.write_split_dataset("test", testFamily)
        if self.val:
            self.write_split_dataset("val", valFamily)

    def load_dataset(self, mode) -> pd.DataFrame:
        filepath = f"{self.datasetSplitFolder}/{mode}_{self.cpuArch}_{self.byte_sequence_length}.txt"
        if not os.path.exists(filepath):
            print(f"Split dataset for {mode} does not exist, creating split dataset...")
            self.get_split_dataset()
        
        with open(filepath, "r") as f:
            familyList = f.read().splitlines()
        
        data = self.rawDataset[self.rawDataset["family"].isin(familyList)]
        print(f"{mode} dataset shape: {data.shape}")
        print(f"{mode} dataset family number: {len(data['family'].unique())}")
        return data

    def load_all_datasets(self):
        print("Loading all datasets...")
        trainData = self.load_dataset("train")
        testData = self.load_dataset("test")
        valData = self.load_dataset("val") if self.val else None
        return trainData, testData, valData